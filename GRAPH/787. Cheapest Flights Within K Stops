class Pair{
    int first;
    int second;
    Pair(int f,int s){
        this.first=f;
        this.second=s;
    }
}
class Tuple{
    int node;
    int stop;
    int dis;
    Tuple(int n,int s,int d){
        this.node=n;
        this.stop=s;
        this.dis=d;
    }
}
class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        ArrayList<ArrayList<Pair>>adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int flight[]:flights){
            int u=flight[0];
            int v=flight[1];
            int w=flight[2];
            adj.get(u).add(new Pair(v,w));
        }

        int dist[]=new int[n];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[src]=0;
        Queue<Tuple>q=new LinkedList<>();
        q.add(new Tuple(src,0,0));
        while(!q.isEmpty()){
            Tuple p=q.poll();
            int node=p.node;
            int stop=p.stop;
            int d=p.dis;

            if(stop>k)continue;
            for(Pair neighbour : adj.get(node)){
                int adjnode=neighbour.first;
                int w=neighbour.second;
                if(d+w<dist[adjnode]&& stop<=k){
                    dist[adjnode]=d+w;
                    q.add(new Tuple(adjnode,stop+1,d+w));
                }
            }
        }
        return dist[dst]==Integer.MAX_VALUE?-1:dist[dst];

    }
}