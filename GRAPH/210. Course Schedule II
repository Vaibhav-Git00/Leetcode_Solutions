class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>>adj=new ArrayList<>();
        for(int i=0;i<numCourses;i++){
            adj.add(new ArrayList<>());
        }
        for(int edge[]:prerequisites){
            adj.get(edge[1]).add(edge[0]);
        }
        int indegree[]=new int[numCourses];
        for(int i=0;i<numCourses;i++){
            for(int ele : adj.get(i)){
                indegree[ele]++;
            }
        }
        Queue<Integer>q=new LinkedList<>();
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }

        ArrayList<Integer>result=new ArrayList<>();
        while(!q.isEmpty()){
            int node=q.poll();
            result.add(node);
            for(int ele : adj.get(node)){
                indegree[ele]--;
                if(indegree[ele]==0){
                    q.add(ele);
                }
            }
        }
        int ans[]=new int[result.size()];
        for(int i=0;i<result.size();i++){
            ans[i]=result.get(i);
        }
        if(result.size()==numCourses)return ans;
        return new int[0];
    }
}