class Pair{
    int freq;
    char ch ;
    Pair(int f,char c){
        this.freq=f;
        this.ch=c;
    }
}
class Solution {
    public String reorganizeString(String s) {
        HashMap<Character,Integer>mp=new HashMap<>();
        

        for(char ch :s.toCharArray()){
            int count=mp.getOrDefault(ch,0)+1;
            if(count>(s.length()+1)/2){
                return "";
            }
            mp.put(ch,count);
        }

        PriorityQueue<Pair>pq=new PriorityQueue<>((a,b)->b.freq-a.freq);
        for(char ch :mp.keySet()){
            pq.add(new Pair(mp.get(ch),ch));
        }
        StringBuilder sb=new StringBuilder();
        while(pq.size()>=2){
            Pair first=pq.poll();
            Pair second=pq.poll();

            sb.append(first.ch);
            sb.append(second.ch);

            if(--first.freq>0)pq.add(first);
            if(--second.freq>0)pq.add(second);
        }

        if(!pq.isEmpty()){
            Pair last=pq.poll();
            sb.append(last.ch);
        }
        return sb.toString();

    }
}

