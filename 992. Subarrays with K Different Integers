class Solution {
    //this approach or mathmatics applied in this bec it has taking only positive and couunt krna tha and exactly case tha 
    public int subarraysWithKDistinct(int[] nums, int k) {
        return atmost(nums,k)-atmost(nums,k-1);
    }
    private int atmost(int nums[],int k){
        int l=0;
        int r=0;
        int n=nums.length;
        int count =0;
        HashMap<Integer,Integer>mp = new HashMap<>();
        while(r<n){
            mp.put(nums[r],mp.getOrDefault(nums[r],0)+1);
            if(mp.get(nums[r])==1) k--; //means new element added
            while(k<0){
                mp.put(nums[l],mp.get(nums[l])-1);
                if(mp.get(nums[l])==0){
                    mp.remove(nums[l]);
                    k++;
                }
                l++;
            }
            count=count+(r-l+1);
            r++;
        }
        return count;
    }
}