class Solution {
    public int coinChange(int[] coins, int amount) {
        int n=coins.length;
        int dp[][]=new int[n][amount+1];
        for(int row[]:dp){
            Arrays.fill(row,-1);
        }
        int result=solve(n-1,coins,amount,dp);
        return (result==(int)1e8)?-1:result;
    }
    public int solve(int n,int coin[],int k,int dp[][]){
        if(n==0){
            if(k%coin[n]==0){
                return k/coin[n];
            }else{
                return (int)1e8;
            }
        }
        if(dp[n][k]!=-1)return dp[n][k];
        int notaken=0+solve(n-1,coin,k,dp);
        int taken=Integer.MAX_VALUE;
        if(coin[n]<=k){
            taken=1+solve(n,coin,k-coin[n],dp);
        }
        return dp[n][k]=Math.min(taken,notaken);
    }
}