class Solution {
    public void parentrack(TreeNode root,HashMap<TreeNode,TreeNode>mp){
        Queue<TreeNode>q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode current=q.poll();
            if(current.left!=null){
                q.add(current.left);
                mp.put(current.left,current);
            }
            if(current.right!=null){
                q.add(current.right);
                mp.put(current.right,current);
            }
        }
    }

    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        HashMap<TreeNode ,TreeNode>mp=new HashMap<>();
        parentrack(root,mp);

        HashMap<TreeNode,Boolean>vis=new HashMap<>();
        Queue<TreeNode>q=new LinkedList<>();
        q.add(target);
        vis.put(target,true);
        int currlevel=0;

        while(!q.isEmpty()){
            int n=q.size();
            if(currlevel==k)break;
            currlevel++;

            for(int i=0;i<n;i++){
                TreeNode current=q.poll();

                if(current.left!=null && vis.get(current.left)==null){
                    q.add(current.left);
                    vis.put(current.left,true);
                }
                if(current.right!=null && vis.get(current.right)==null){
                    q.add(current.right);
                    vis.put(current.right,true);
                }
                if(mp.get(current)!=null && vis.get(mp.get(current))==null){
                    q.add(mp.get(current));
                    vis.put(mp.get(current),true);
                }
            }
        }

        List<Integer>ans=new ArrayList<>();
        while(!q.isEmpty()){
            TreeNode curr=q.poll();
            ans.add(curr.val);
        }
        return ans;

    }
}