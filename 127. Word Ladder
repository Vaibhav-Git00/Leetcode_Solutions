class Pair{
    String first;
    int second;
    Pair(String f,int s){
        this.first=f;
        this.second=s;
    }
}
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        HashSet<String>st=new HashSet<>();
        for(String s : wordList){
            st.add(s);
        }
        st.remove(beginWord);
        Queue<Pair>q=new LinkedList<>();
        q.add(new Pair(beginWord,1));


        while(!q.isEmpty()){
            Pair p=q.poll();
            String word=p.first;
            int steps=p.second;
            if(word.equals(endWord))return steps;
            for(int i=0;i<word.length();i++){
                for(char ch ='a';ch<='z';ch++){
                    char arr []=word.toCharArray();
                    arr[i]=ch;
                    String newword=new String(arr);
                    if(st.contains(newword)){
                        st.remove(newword);
                        q.add(new Pair(newword,steps+1));
                    }
                }
            }
        }
        return 0;
    }
}